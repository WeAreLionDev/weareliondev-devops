name: 'Install Yarn Dependencies (node-modules)'
description: 'Run yarn install with node_modules linker and cache enabled, using Volta for Node.js and Yarn version management'

inputs:
  cwd:
    description: "Changes node's process.cwd() if the project is not located at the root. Default is '.'"
    required: false
    default: '.'
  cache-prefix:
    description: 'Add a specific cache-prefix'
    required: false
    default: 'default'
  cache-npm-cache:
    description: 'Cache npm global cache folder often used by node-gyp, prebuild binaries (invalidated on lock/os/node-version)'
    required: false
    default: 'true'
  cache-node-modules:
    description: 'Cache node_modules to speed up the link step (invalidated by lock/os/node-version/branch)'
    required: false
    default: 'false'
  cache-install-state:
    description: 'Cache yarn install state to speed up resolution when node_modules cache is activated (invalidated by lock/os/node-version/branch)'
    required: false
    default: 'false'
  fontawesome:
    description: 'Apply FontAwesome NPM Token'
    required: false
    default: 'false'
  fontawesome-npm-token:
    description: 'FontAwesome NPM Token'
    required: false
    default: ''

runs:
  using: 'composite'

  steps:
    - name: ‚öôÔ∏è Install Volta
      uses: volta-cli/action@v4
      with:
        # Volta will read the Node.js and Yarn versions from the 'volta' field in 'package.json'
        install-yarn: true
        install-node: true

    - name: ‚öôÔ∏è Expose yarn config as "$GITHUB_OUTPUT"
      id: yarn-config
      shell: bash
      working-directory: ${{ inputs.cwd }}
      env:
        YARN_ENABLE_GLOBAL_CACHE: 'false'
      run: |
        echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        echo "CURRENT_NODE_VERSION=node-$(node --version)" >> $GITHUB_OUTPUT
        echo "CURRENT_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's,/,-,g')" >> $GITHUB_OUTPUT
        echo "NPM_GLOBAL_CACHE_FOLDER=$(npm config get cache)" >> $GITHUB_OUTPUT

    - name: ‚ôªÔ∏è Restore node_modules
      if: ${{ inputs.cache-node-modules == 'true' }}
      id: yarn-nm-cache
      uses: actions/cache@v4
      with:
        path: '${{ inputs.cwd }}/**/node_modules'
        key: |
          yarn-nm-cache-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ steps.yarn-config.outputs.CURRENT_NODE_VERSION }}-${{ steps.yarn-config.outputs.CURRENT_BRANCH }}-${{ hashFiles(format('{0}/yarn.lock', inputs.cwd), format('{0}/.yarnrc.yml', inputs.cwd)) }}

    - name: ‚ôªÔ∏è Restore global npm cache folder
      if: ${{ inputs.cache-npm-cache == 'true' }}
      id: npm-global-cache
      uses: actions/cache@v4
      with:
        path: '${{ steps.yarn-config.outputs.NPM_GLOBAL_CACHE_FOLDER }}'
        key: |
          npm-global-cache-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ steps.yarn-config.outputs.CURRENT_NODE_VERSION }}-${{ hashFiles(format('{0}/yarn.lock', inputs.cwd), format('{0}/.yarnrc.yml', inputs.cwd)) }}

    - name: ‚ôªÔ∏è Restore yarn install state
      if: ${{ inputs.cache-install-state == 'true' && inputs.cache-node-modules == 'true' }}
      id: yarn-install-state-cache
      uses: actions/cache@v4
      with:
        path: '${{ inputs.cwd }}/.yarn/ci-cache'
        key: |
          yarn-install-state-cache-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ steps.yarn-config.outputs.CURRENT_NODE_VERSION }}-${{ steps.yarn-config.outputs.CURRENT_BRANCH }}-${{ hashFiles(format('{0}/yarn.lock', inputs.cwd), format('{0}/.yarnrc.yml', inputs.cwd)) }}

    - name: üì• Set FontAwesome NPM Token
      if: ${{ inputs.fontawesome == 'true' && inputs.fontawesome-npm-token != '' }}
      shell: bash
      working-directory: ${{ inputs.cwd }}
      env:
        FONTAWESOME_NPM_AUTH_TOKEN: ${{ inputs.fontawesome-npm-token }}
      run: |
        yarn config set npmScopes.fortawesome.npmRegistryServer "https://npm.fontawesome.com"
        yarn config set npmScopes.fortawesome.npmAlwaysAuth true
        yarn config set npmScopes.fortawesome.npmAuthToken $FONTAWESOME_NPM_AUTH_TOKEN

    - name: üì• Install dependencies
      shell: bash
      working-directory: ${{ inputs.cwd }}
      run: yarn install --immutable --inline-builds
      env:
        # Overrides/align yarnrc.yml options (v2+) for a CI context
        YARN_ENABLE_GLOBAL_CACHE: 'false' # Use local cache folder to keep downloaded archives
        YARN_ENABLE_MIRROR: 'false'       # Prevent populating global cache for cache misses (local cache only)
        YARN_NM_MODE: 'hardlinks-local'   # Reduce node_modules size
        YARN_INSTALL_STATE_PATH: '.yarn/ci-cache/install-state.gz' # Might speed up resolution when node_modules are present
        # Other environment variables
        HUSKY: '0' # By default, do not run HUSKY install
